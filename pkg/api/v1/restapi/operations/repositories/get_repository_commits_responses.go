// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sourcepods/sourcepods/pkg/api/v1/models"
)

// GetRepositoryCommitsOKCode is the HTTP code returned for type GetRepositoryCommitsOK
const GetRepositoryCommitsOKCode int = 200

/*GetRepositoryCommitsOK The repository's commits

swagger:response getRepositoryCommitsOK
*/
type GetRepositoryCommitsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Commit `json:"body,omitempty"`
}

// NewGetRepositoryCommitsOK creates GetRepositoryCommitsOK with default headers values
func NewGetRepositoryCommitsOK() *GetRepositoryCommitsOK {

	return &GetRepositoryCommitsOK{}
}

// WithPayload adds the payload to the get repository commits o k response
func (o *GetRepositoryCommitsOK) WithPayload(payload []*models.Commit) *GetRepositoryCommitsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository commits o k response
func (o *GetRepositoryCommitsOK) SetPayload(payload []*models.Commit) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryCommitsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Commit, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetRepositoryCommitsNotFoundCode is the HTTP code returned for type GetRepositoryCommitsNotFound
const GetRepositoryCommitsNotFoundCode int = 404

/*GetRepositoryCommitsNotFound The owner and name combination could not be found

swagger:response getRepositoryCommitsNotFound
*/
type GetRepositoryCommitsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRepositoryCommitsNotFound creates GetRepositoryCommitsNotFound with default headers values
func NewGetRepositoryCommitsNotFound() *GetRepositoryCommitsNotFound {

	return &GetRepositoryCommitsNotFound{}
}

// WithPayload adds the payload to the get repository commits not found response
func (o *GetRepositoryCommitsNotFound) WithPayload(payload *models.Error) *GetRepositoryCommitsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository commits not found response
func (o *GetRepositoryCommitsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryCommitsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRepositoryCommitsDefault unexpected error

swagger:response getRepositoryCommitsDefault
*/
type GetRepositoryCommitsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRepositoryCommitsDefault creates GetRepositoryCommitsDefault with default headers values
func NewGetRepositoryCommitsDefault(code int) *GetRepositoryCommitsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRepositoryCommitsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get repository commits default response
func (o *GetRepositoryCommitsDefault) WithStatusCode(code int) *GetRepositoryCommitsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get repository commits default response
func (o *GetRepositoryCommitsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get repository commits default response
func (o *GetRepositoryCommitsDefault) WithPayload(payload *models.Error) *GetRepositoryCommitsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository commits default response
func (o *GetRepositoryCommitsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryCommitsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
