// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Commit commit
// swagger:model commit
type Commit struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// author email
	// Required: true
	AuthorEmail *string `json:"author_email"`

	// committer
	// Required: true
	Committer *string `json:"committer"`

	// committer email
	// Required: true
	CommitterEmail *string `json:"committer_email"`

	// hash
	// Required: true
	Hash *string `json:"hash"`

	// message
	// Required: true
	Message *string `json:"message"`

	// parent
	// Required: true
	Parent *string `json:"parent"`

	// tree
	// Required: true
	Tree *string `json:"tree"`
}

// Validate validates this commit
func (m *Commit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitterEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTree(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Commit) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateAuthorEmail(formats strfmt.Registry) error {

	if err := validate.Required("author_email", "body", m.AuthorEmail); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateCommitter(formats strfmt.Registry) error {

	if err := validate.Required("committer", "body", m.Committer); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateCommitterEmail(formats strfmt.Registry) error {

	if err := validate.Required("committer_email", "body", m.CommitterEmail); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("hash", "body", m.Hash); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateParent(formats strfmt.Registry) error {

	if err := validate.Required("parent", "body", m.Parent); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateTree(formats strfmt.Registry) error {

	if err := validate.Required("tree", "body", m.Tree); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Commit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Commit) UnmarshalBinary(b []byte) error {
	var res Commit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
